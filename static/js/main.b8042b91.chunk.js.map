{"version":3,"sources":["redux/reducers.js","components/Details.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","containers/MainComponent.js","redux/actionCreators.js","redux/actionTypes.js","serviceWorker.js","index.js"],"names":["initialState","searchField","initialStateRobots","isPending","robots","error","Details","props","myRobot","filter","robot","id","parseInt","console","log","style","display","justifyContent","marginRight","alt","src","marginTop","name","address","street","city","phone","email","textAlign","Card","className","textDecoration","to","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","overflow","border","height","children","App","filteredRobots","toLowerCase","includes","onSearchChange","MainComponent","this","requestingRobots","exact","path","render","match","params","React","Component","connect","state","searchRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","requestRobotsFailed","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b8042b91.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    searchField: \"\"\r\n}\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestingRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\n\r\n\r\nconst Details = (props) => {\r\n    const myRobot = props.robots.filter((robot) => {\r\n        return robot.id === parseInt(props.id, 10);\r\n    })[0]\r\n    if (myRobot) {\r\n        console.log(myRobot)\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", marginRight: \"200px\" }}>\r\n                <img alt='robots' src={`https://robohash.org/${props.id}?size=300x400`} />\r\n                <div style={{ marginTop: \"100px\" }}>\r\n                    <h3>Hi, my name is {myRobot.name}! </h3>\r\n                    <h3>I live in {myRobot.address.street} street. It's in {myRobot.address.city}! </h3>\r\n                    <h3>If you wanna contact me, my number is {myRobot.phone} </h3>\r\n                    <h3>Or via email, {myRobot.email} </h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n      <Link style={{ textDecoration: \"none\" }} to={`/robots/${id}`}>\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\n\r\nconst App = (props) => {\r\n  const filteredRobots = props.robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(props.searchField.toLowerCase());\r\n  });\r\n  return props.isPending ? (\r\n    <h1>Loading</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox searchChange={props.onSearchChange} />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { setSearchField, resquestRobots } from \"../redux/actionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport Details from \"../components/Details\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestingRobots.robots,\r\n    error: state.requestingRobots.error,\r\n    isPending: state.requestingRobots.isPending,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    requestingRobots: () => dispatch(resquestRobots()),\r\n  };\r\n};\r\n\r\nclass MainComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.props.requestingRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    return (\r\n      <div>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/robofriends\"\r\n              render={() => (\r\n                <App\r\n                  searchField={searchField}\r\n                  onSearchChange={onSearchChange}\r\n                  isPending={isPending}\r\n                  robots={robots}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/robots/:id\"\r\n              render={({ match }) => (\r\n                <Details robots={robots} id={match.params.id} />\r\n              )}\r\n            />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./actionTypes\";\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (error) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (robots) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: robots\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const resquestRobots = () => (dispatch) => {\r\n    dispatch(requestRobotsPending());\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => dispatch(requestRobotsSuccess(users)))\r\n      .catch(error => dispatch(requestRobotsFailed(error)));\r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport \"tachyons\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestingRobots } from \"./redux/reducers\";\r\nimport MainComponent from \"./containers/MainComponent\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestingRobots,\r\n});\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MainComponent />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}