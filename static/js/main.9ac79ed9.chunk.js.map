{"version":3,"sources":["redux/reducers.js","components/Details.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","containers/MainComponent.js","redux/actionCreators.js","redux/actionTypes.js","index.js"],"names":["initialState","searchField","initialStateRobots","isPending","robots","error","Details","props","myRobot","filter","robot","id","parseInt","console","log","style","display","justifyContent","marginRight","alt","src","marginTop","name","address","street","city","phone","email","textAlign","Card","className","textDecoration","to","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","overflow","border","height","children","App","filteredRobots","toLowerCase","includes","onSearchChange","MainComponent","this","requestingRobots","exact","path","render","match","params","React","Component","connect","state","searchRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","requestRobotsFailed","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9ac79ed9.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    searchField: \"\"\r\n}\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestingRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\n\r\n\r\nconst Details = (props) => {\r\n    const myRobot = props.robots.filter((robot) => {\r\n        return robot.id === parseInt(props.id, 10);\r\n    })[0]\r\n    if (myRobot) {\r\n        console.log(myRobot)\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", marginRight: \"200px\" }}>\r\n                <img alt='robots' src={`https://robohash.org/${props.id}?size=300x400`} />\r\n                <div style={{ marginTop: \"100px\" }}>\r\n                    <h3>Hi, my name is {myRobot.name}! </h3>\r\n                    <h3>I live in {myRobot.address.street} street. It's in {myRobot.address.city}! </h3>\r\n                    <h3>If you wanna contact me, my number is {myRobot.phone} </h3>\r\n                    <h3>Or via email, {myRobot.email} </h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <Link style={{textDecoration:\"none\"}} to={`/robots/${id}`}>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n      </Link>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\n\r\nconst App = (props) => {\r\n  const filteredRobots = props.robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(props.searchField.toLowerCase());\r\n  });\r\n  return props.isPending ? (\r\n    <h1>Loading</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <SearchBox searchChange={props.onSearchChange} />\r\n      <Scroll>\r\n        <CardList robots={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\"\r\nimport { setSearchField, resquestRobots } from '../redux/actionCreators';\r\nimport { connect } from 'react-redux';\r\nimport Details from \"../components/Details\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestingRobots.robots,\r\n        error: state.requestingRobots.error,\r\n        isPending: state.requestingRobots.isPending\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        requestingRobots: () => dispatch(resquestRobots())\r\n    }\r\n}\r\n\r\nclass MainComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.requestingRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => <App searchField={searchField} \r\n                            onSearchChange={onSearchChange} isPending={isPending} robots={robots} />} />\r\n                        <Route exact path=\"/robots/:id\" render={({match}) => <Details robots={robots} id={match.params.id}  />} />\r\n                        <Redirect to=\"/\" />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./actionTypes\";\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (error) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (robots) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: robots\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const resquestRobots = () => (dispatch) => {\r\n    dispatch(requestRobotsPending());\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => dispatch(requestRobotsSuccess(users)))\r\n      .catch(error => dispatch(requestRobotsFailed(error)));\r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport \"tachyons\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobots, requestingRobots } from \"./redux/reducers\";\r\nimport MainComponent from \"./containers/MainComponent\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestingRobots,\r\n});\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MainComponent />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}